
[x] const members (maybe not, because not supported by python)
[ ] STL containers
    * --> name mangling
[v] steal from custom shared_ptr
    * go back to custom unique_ptr, provide item copier/mover there
      * implemented copier/mover in custom shared_ptr
    * maybe it's comparably reasonable to keep moving pointers around
      * no it's not. Better: copy/move in, then get new reference to C++ object
        back, because this ties the lifetime of the owner to the lifetime of the
        returned reference. This is now implemented.
[ ] overridden methods (write test)
[ ] static methods
[ ] static_assert is_base_of
[ ] check is_default_constructible
[ ] guess some constructors, e.g. a constructor taking all the direct data members in
    the order defined by the reflection
[ ] copy constructor, but not move ctor (because not supported by python)
[ ] split tests
[ ] derived class member shadowing base class member
[ ] http://www.boost.org/doc/libs/master/libs/core/doc/html/core/demangle.html

