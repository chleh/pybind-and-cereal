
[x] const members (maybe not, because not supported by python)
[ ] Python bindings for STL containers
    [v] --> name mangling
[v] steal from custom shared_ptr
    * go back to custom unique_ptr, provide item copier/mover there
      * implemented copier/mover in custom shared_ptr
    * maybe it's comparably reasonable to keep moving pointers around
      * no it's not. Better: copy/move in, then get new reference to C++ object
        back, because this ties the lifetime of the owner to the lifetime of the
        returned reference. This is now implemented.
[v] overridden methods (write test)
[ ] disallow:
    [ ] overwriting of fields in derived classes
    [ ] early binding/static dispatch of methods
[ ] static methods
[v] check is_default_constructible
[v] guess some constructors, e.g. a constructor taking all the direct data members in
    the order defined by the reflection
[/] custom ctors
[v] copy constructor, but not move ctor (because not supported by python)
[v] split tests
[x] derived class member shadowing base class member -- forbidden!
[v] http://www.boost.org/doc/libs/master/libs/core/doc/html/core/demangle.html
[ ] multiple inheritance
[ ] refactoring:
    [v] namespaces
    [v] split tests
    [ ] more tests (pybind and serialization)
    [ ] rename macros
    [ ] more static assertions, e.g. is_base_of, no pointer types supported
    [v] smart_ptr<T> --> std::shared_ptr<Item<T>>
        [/] write smart_ptr tests
    [ ] clean up includes
[v] function overloads (e.g., for assigning nullptr to unique_ptr)
[v] python submodules
[ ] test inheritance in python
    * It could be static_asserted that if a type std::is_polymorphic and not
      std::is_final, then a trampoline class for it must be provided for
      reasons of consistency between the C++ code and the python bindings.
[ ] compilation speed
[ ] check return policy for pointers, l-value refs, rvalues
    [v] getters (def_read...()) are return_value_policy::reference_internal (pybind11.h)
    *   default return value policy is automatic (check struct function_record),
        i.e., copy/move for l-/r-values
    [v] data members of type unique_ptr
    [v] return values of member functions
    [ ] write tests for that
[ ] overloaded methods (don't fit the current macros), check py::overload_cast
    maybe add REFLECT_FULL(...) macro
[v] functions with unique_ptr returns/args
[v] "Unable to load a custom holder type from a default-holder instance"
    e.g., with std::vector<int>
    [x] maybe circumvent by globally setting the pybind11 holder type
        --> default is unique_ptr, cf. pybind11.h
    [x] maybe circumvent by wrapping std::vector<int> in some custom type
    * issue resolved by specifying right holder type for std::vector
[ ] unit tests for name mangling routines
[v] split python bindings for one module to multiple compilation units
[v] Add test: Derive a class in types_one_b from a base in types_one_a
[ ] serialization
    [ ] objects with non-default ctors
    [ ] split serialization code across multiple compilation units
[ ] check recursive aux type detection
    [ ] test std::vector<std::unique_ptr<T>>
[v] argument converters for ctors
[v] argument converters for move-only fields
[ ] test passing base and derived types to copy_to_unique_ptr etc.
[ ] pickling support (maybe problems with const members)
[ ] remove references from ArgumentConverter::AuxType


Non-Features
============

* enums
* templated member functions
* pointer data members: conflicts with cereal

