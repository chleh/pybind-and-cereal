import sys # debug

import unittest
import os

import pickle

import types_one.types_one_a
import pickle_types
import auxiliary_types_autogenerated as aux


class TestPickleSimple(unittest.TestCase):
    def setUp(self):
        self.filename = "non_default_constructible.pickle"
        ndc = types_one.NonDefaultConstructible(5.0, 7)
        # help(ndc)
        with open(self.filename, "wb") as fh:
            pickle.dump(ndc, fh, -1)

    def test_unpickle(self):
        with open(self.filename, "rb") as fh:
            ndc = pickle.load(fh)
        os.unlink(self.filename)

        self.assertEqual(5.0, ndc.a)
        self.assertEqual(7, ndc.b)


class TestPickleNoncopyableInstance(unittest.TestCase):
    def setUp(self):
        self.filename = "nocopy.pickle"
        nc = types_one.types_one_a.NoCopy()
        nc.i = 5
        nc.s = "Hello!"

        with open(self.filename, "wb") as fh:
            pickle.dump(nc, fh, -1)

    def test_unpickle(self):
        with open(self.filename, "rb") as fh:
            nc = pickle.load(fh)
        os.unlink(self.filename)

        self.assertEqual(5, nc.i)
        self.assertEqual("Hello!", nc.s)


class TestPickleEmptyBaseClass(unittest.TestCase):
    def setUp(self):
        self.filename = "empty_base.pickle"
        a = pickle_types.DerivedFromEmptyInt()
        a.i = 5
        b = pickle_types.DerivedFromEmptyString()
        b.s = "Hello!"

        with open(self.filename, "wb") as fh:
            pickle.dump((a, b), fh, -1)

    def test_unpickle(self):
        with open(self.filename, "rb") as fh:
            a, b = pickle.load(fh)
        os.unlink(self.filename)

        self.assertEqual(5, a.i)
        self.assertEqual("Hello!", b.s)


class TestPickleOwnsEmpty(unittest.TestCase):
    def setUp(self):
        self.filename = "owns_empty.pickle"
        a = pickle_types.DerivedFromEmptyInt()
        a.i = 5
        o = pickle_types.OwnsEmpty()
        o.e = aux.copy_to_unique_ptr(a)

        with open(self.filename, "wb") as fh:
            pickle.dump(o, fh, -1)

    def test_unpickle(self):
        with open(self.filename, "rb") as fh:
            o = pickle.load(fh)
        os.unlink(self.filename)

        self.assertEqual("5", o.e.what())


class TestPickleContainsVectorOfEmpty(unittest.TestCase):
    def setUp(self):
        self.filename = "contains_vector_of_empty.pickle"
        a = pickle_types.DerivedFromEmptyInt()
        a.i = 7
        b = pickle_types.DerivedFromEmptyString()
        b.s = "Hello World!"
        c = pickle_types.ContainsVectorOfEmpty()
        print(aux.aux_types)
        c.vs = aux.aux_types["std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >"]([ "a", "b" ])

        vi = aux.aux_types["std::vector<int, std::allocator<int> >"]([ 1, 2, 3 ])
        c.vi = vi
        v = aux.aux_types["std::vector<std::shared_ptr<pickle_types::Empty>, std::allocator<std::shared_ptr<pickle_types::Empty> > >"]([ a, b ])
        c.v = v
        print("OK")
        sys.stdout.flush()
        print(a.what())
        print(b.what())
        print(v[0].what())
        # print(v.__getstate__())
        # print([a, b])

        print("OK 1.5")
        sys.stdout.flush()

        with open(self.filename, "wb") as fh:
            pickle.dump(c, fh, -1)
        print("OK 2")
        sys.stdout.flush()

    def test_unpickle(self):
        with open(self.filename, "rb") as fh:
            c = pickle.load(fh)
        os.unlink(self.filename)

        v = c.v
        self.assertEqual(2, len(v))
        self.assertEqual("7", v[0].what())
        self.assertEqual("Hello World!", v[1].what())

        for s_ref, s_act in zip(["a", "b"], c.vs):
            self.assertEqual(s_ref, s_act)
        for i_ref, i_act in zip([1, 2, 3], c.vi):
            self.assertEqual(i_ref, i_act)


if __name__ == '__main__':
    unittest.main()

