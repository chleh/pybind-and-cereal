import unittest
import types_one.types_one_b
import test_unique_ptr
import auxiliary_types_autogenerated as aux

class TestMethodArgsReturns(unittest.TestCase):
    def test_unique_ptr_return(self):
        d3 = types_one.types_one_b.all_types["Derived3<int, int>"]();
        res = d3.f()

        self.assertIs(types_one.types_one_b.all_types["Derived3<int, int>"], type(res))
        # TODO revert to the old code below?
        # self.assertIs(tp.Derived1, type(res))

    def test_nocopy_arg(self):
        d3 = types_one.types_one_b.all_types["Derived3<int, int>"]();
        nc = types_one.types_one_a.NoCopy()
        nc.i = 42

        res = d3.nocopy_method_arg(nc)
        self.assertEqual(nc.i, res)

    def test_unique_ptr_args(self):
        upt = test_unique_ptr.UniquePtrTest()
        upt.i = 42

        ref = aux.copy_to_unique_ptr(upt)

        self.assertEqual(2*upt.i, upt.i_up_cr(ref))
        self.assertEqual(3*upt.i, upt.i_up_r(ref))
        self.assertEqual(5*upt.i, upt.i_up_rr(ref))
        self.assertEqual(7*upt.i, upt.i_up(ref))

    def test_rvalue_args(self):
        rvt = test_unique_ptr.RValueRefTest()
        rvt.i = 42

        ref = aux.copy_to_rvalue_reference(rvt)

        self.assertEqual(2*rvt.i, rvt.f(ref))

    def test_tmp(self):
        ct = test_unique_ptr.CtorTest()
        self.assertEqual(0, ct.i)
        print("#######")
        ct.f(ct)
        self.assertEqual(8, ct.i)

        ct2 = test_unique_ptr.CtorTest(aux.move_to_unique_ptr(ct), 5)
        self.assertEqual(5, ct2.i)
        self.assertEqual(8, ct2.c.i)

if __name__ == '__main__':
    unittest.main()

